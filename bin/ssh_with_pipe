#!/bin/bash

function __swp_main() {
  tmpdir="${TMPDIR-/tmp}"
  SSH_PIPE_FILE="$tmpdir/ssh_with_pipe"
  SSH_PIPE_LOCKFILE="$tmpdir/ssh_with_pipe.lock"
  SSH_PIPE_LOG="$tmpdir/ssh_with_pipe.out"

  local usage

  read -r -d '' usage <<-EOF
    $usage\n
ssh_with_pipe watch
\tStarts watching the pipe, running commands as they come through.
EOF
  function swp_watch() {
    if [[ -f "$SSH_PIPE_LOCKFILE" ]]; then
      echo "$SSH_PIPE_LOCKFILE exists, not watching."
      return 1
    fi
    nohup bash -c "ssh_with_pipe _do_tail" >> "$SSH_PIPE_LOG" &
    return 0
  }

  function _swp_cleanup_tail() {
    rm -f "$SSH_PIPE_LOCKFILE"
    echo "--- Watcher $$ exiting at $(date -R) ---" >> "$SSH_PIPE_LOG"
  }

  function _swp_handle_row() {
    local row="$1"
    if [[ "$row" == "open "* ]]; then
      local args="${row#'open '}"
      echo "Opening $args" >> "$SSH_PIPE_LOG"
      open $args 2>> "$SSH_PIPE_LOG";
      return 0;
    fi
    if [[ "$row" == "copy "* ]]; then
      local args="${row#'copy '}"
      echo "Copying $args" >> "$SSH_PIPE_LOG"
      copy $args 2>> "$SSH_PIPE_LOG";
      return 0;
    fi
    echo "Unrecognized command: '$row' [can be: open, copy]" >> "$SSH_PIPE_LOG"
    return 1;
  }

  function _swp_do_tail() {
    mkdir -p "$(dirname "$SSH_PIPE_LOCKFILE")"
    touch "$SSH_PIPE_LOCKFILE"
    echo "--- Watcher $$ starting at $(date -R) ---" >> "$SSH_PIPE_LOG"
    trap "_swp_cleanup_tail" EXIT INT TERM
    while read line; do
      _swp_handle_row "$line"
    done < <(tail -f -n 0 "$SSH_PIPE_FILE")
  }

  read -r -d '' usage <<-EOF
    $usage\n
ssh_with_pipe connect [[user@]host:[port]] [rest_of_args_for_ssh]
\tConnects to ssh twice - the first connection waits for commands in the ssh
\tpipe, and the second actually connects to ssh.
EOF
  function swp_connect() {
    if swp_watch; then
      trap 'swp_release' EXIT INT TERM
      mkdir -p "$(dirname "$SSH_PIPE_FILE")"
      ssh $1 'touch "${TMPDIR-/tmp}/ssh_with_pipe" && tail -f -n 0 "${TMPDIR-/tmp}/ssh_with_pipe"' 1>> "$SSH_PIPE_FILE" 2>> "$SSH_PIPE_LOG" &
      open_ssh="$!"
    fi
    ssh $@
  }

  read -r -d '' usage <<-EOF
    $usage\n
ssh_with_pipe log
\tShows logs to help in troubleshooting ssh_with_pipe.
EOF
  function swp_log() {
    trap 'jobs -p | xargs -r kill' EXIT INT TERM
    tail -f -n +0 "$SSH_PIPE_LOG"
  }

  read -r -d '' usage <<-EOF
    $usage\n
ssh_with_pipe release
\tForcibly terminates any remaining ssh_with_pipe processes.
EOF
  function swp_release() {
    pkill -f "tail -f -n 0 $tmpdir/ssh_with_pipe"
    rm -f "$SSH_PIPE_LOCKFILE"
    jobs -p | xargs -r kill -9
  }


  cmd="$1"
  shift 1
  case "$cmd" in
    connect)
      swp_connect "$@"
      ;;

    log)
      swp_log "$@"
      ;;

    watch)
      swp_watch "$@"
      ;;

    release)
      swp_release "$@"
      ;;

    _do_tail)
      _swp_do_tail "$@"
      ;;

    *)
      printf "Usage:$usage\n\n"
      ;;
  esac
}

# If we're not being sourced by .bashrc, run main and exit.
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  __swp_main "$@"
  exit $?
fi

# Check whether we're controlled by ssh.
function _swp_is_remote() {
  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    return 0
  else
    return 1
  fi
}

if _swp_is_remote ; then
  export PATH="$(dirname "$(dirname "${BASH_SOURCE[0]}")")/remote-bin:$PATH"
fi
